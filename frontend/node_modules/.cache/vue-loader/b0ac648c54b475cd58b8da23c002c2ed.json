{"remainingRequest":"/mnt/062CBB052CBAEEB5/projects/vue-intro/porsan/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/mnt/062CBB052CBAEEB5/projects/vue-intro/porsan/frontend/src/views/AnswerEditor.vue?vue&type=script&lang=js&","dependencies":[{"path":"/mnt/062CBB052CBAEEB5/projects/vue-intro/porsan/frontend/src/views/AnswerEditor.vue","mtime":1607836690417},{"path":"/mnt/062CBB052CBAEEB5/projects/vue-intro/porsan/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/062CBB052CBAEEB5/projects/vue-intro/porsan/frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/mnt/062CBB052CBAEEB5/projects/vue-intro/porsan/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/062CBB052CBAEEB5/projects/vue-intro/porsan/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IGFwaVNlcnZpY2UgfSBmcm9tICJAL2NvbW1vbi9hcGkuc2VydmljZS5qcyI7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiQW5zd2VyRWRpdG9yIiwKICBwcm9wczogewogICAgaWQ6IHsKICAgICAgdHlwZTogTnVtYmVyLAogICAgICByZXF1aXJlZDogdHJ1ZQogICAgfQogIH0sCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHF1ZXN0aW9uU2x1ZzogbnVsbCwKICAgICAgYW5zd2VyQm9keTogbnVsbCwKICAgICAgZXJyb3I6IG51bGwKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIG9uU3VibWl0KCkgewogICAgICBpZiAodGhpcy5hbnN3ZXJCb2R5KSB7CiAgICAgICAgbGV0IGVuZHBvaW50ID0gYC9hcGkvYW5zd2Vycy8ke3RoaXMuaWR9L2A7CiAgICAgICAgYXBpU2VydmljZShlbmRwb2ludCwgIlBVVCIsIHsgYm9keTogdGhpcy5hbnN3ZXJCb2R5IH0pCiAgICAgICAgICAudGhlbigoKSA9PiB7CiAgICAgICAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHsKICAgICAgICAgICAgICBuYW1lOiAicXVlc3Rpb24iLAogICAgICAgICAgICAgIHBhcmFtczogeyBzbHVnOiB0aGlzLnF1ZXN0aW9uU2x1ZyB9CiAgICAgICAgICAgIH0pCiAgICAgICAgICB9KQogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuZXJyb3IgPSAiWW91IGNhbid0IHN1Ym1pdCBhbiBlbXB0eSBhbnN3ZXIhIjsKICAgICAgfQogICAgfQogIH0sCiAgYXN5bmMgYmVmb3JlUm91dGVFbnRlcih0bywgZnJvbSwgbmV4dCkgewogICAgLy8gZ2V0IHRoZSBhbnN3ZXIncyBkYXRhIGZyb20gdGhlIFJFU1QgQVBJIGFuZCBzZXQgdHdvIGRhdGEgcHJvcGVydGllcyBmb3IgdGhlIGNvbXBvbmVudAogICAgbGV0IGVuZHBvaW50ID0gYC9hcGkvYW5zd2Vycy8ke3RvLnBhcmFtcy5pZH0vYDsKICAgIGxldCBkYXRhID0gYXdhaXQgYXBpU2VydmljZShlbmRwb2ludCk7CiAgICByZXR1cm4gbmV4dCh2bSA9PiAoCiAgICAgIHZtLmFuc3dlckJvZHkgPSBkYXRhLmJvZHksCiAgICAgIHZtLnF1ZXN0aW9uU2x1ZyA9IGRhdGEucXVlc3Rpb25fc2x1ZwogICAgKSk7CiAgfQp9Owo="},{"version":3,"sources":["AnswerEditor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"AnswerEditor.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"container mt-2\">\n    <h1 class=\"mb-3\">Edit Your Answer</h1>\n    <form @submit.prevent=\"onSubmit\">\n      <textarea \n        v-model=\"answerBody\" \n        class=\"form-control\" \n        rows=\"3\"\n      ></textarea>\n      <br>\n      <button \n        type=\"submit\" \n        class=\"btn btn-success\"\n        >Publish your answer\n      </button>\n    </form>\n    <p v-if=\"error\" class=\"muted mt-2\">{{ error }}</p>\n  </div>\n</template>\n\n<script>\nimport { apiService } from \"@/common/api.service.js\";\nexport default {\n  name: \"AnswerEditor\",\n  props: {\n    id: {\n      type: Number,\n      required: true\n    }\n  },\n  data() {\n    return {\n      questionSlug: null,\n      answerBody: null,\n      error: null\n    }\n  },\n  methods: {\n    onSubmit() {\n      if (this.answerBody) {\n        let endpoint = `/api/answers/${this.id}/`;\n        apiService(endpoint, \"PUT\", { body: this.answerBody })\n          .then(() => {\n            this.$router.push({\n              name: \"question\",\n              params: { slug: this.questionSlug }\n            })\n          })\n      } else {\n        this.error = \"You can't submit an empty answer!\";\n      }\n    }\n  },\n  async beforeRouteEnter(to, from, next) {\n    // get the answer's data from the REST API and set two data properties for the component\n    let endpoint = `/api/answers/${to.params.id}/`;\n    let data = await apiService(endpoint);\n    return next(vm => (\n      vm.answerBody = data.body,\n      vm.questionSlug = data.question_slug\n    ));\n  }\n};\n</script>\n"]}]}