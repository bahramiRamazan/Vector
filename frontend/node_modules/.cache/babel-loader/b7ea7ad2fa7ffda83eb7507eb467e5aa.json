{"remainingRequest":"D:\\projects\\vue-intro\\porsan\\frontend\\node_modules\\babel-loader\\lib\\index.js!D:\\projects\\vue-intro\\porsan\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\projects\\vue-intro\\porsan\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\projects\\vue-intro\\porsan\\frontend\\src\\views\\QuestionEditor.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\projects\\vue-intro\\porsan\\frontend\\src\\views\\QuestionEditor.vue","mtime":1608721093630},{"path":"D:\\projects\\vue-intro\\porsan\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projects\\vue-intro\\porsan\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\projects\\vue-intro\\porsan\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projects\\vue-intro\\porsan\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiRDovcHJvamVjdHMvdnVlLWludHJvL3BvcnNhbi9mcm9udGVuZC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCB7IGFwaVNlcnZpY2UgfSBmcm9tICJAL2NvbW1vbi9hcGkuc2VydmljZS5qcyI7CmltcG9ydCBCYXNlTGF5b3V0IGZyb20gIkAvY29tcG9uZW50cy9CYXNlTGF5b3V0LnZ1ZSI7CmV4cG9ydCBkZWZhdWx0IHsKICBjb21wb25lbnRzOiB7CiAgICBCYXNlTGF5b3V0OiBCYXNlTGF5b3V0CiAgfSwKICBuYW1lOiAiUXVlc3Rpb25FZGl0b3IiLAogIHByb3BzOiB7CiAgICBzbHVnOiB7CiAgICAgIHR5cGU6IFN0cmluZywKICAgICAgcmVxdWlyZWQ6IGZhbHNlCiAgICB9CiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgcXVlc3Rpb25fYm9keTogbnVsbCwKICAgICAgZXJyb3I6IG51bGwKICAgIH07CiAgfSwKICBtZXRob2RzOiB7CiAgICBvblN1Ym1pdDogZnVuY3Rpb24gb25TdWJtaXQoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICAvLyBUZWxsIHRoZSBSRVNUIEFQSSB0byBjcmVhdGUgb3IgdXBkYXRlIGEgUXVlc3Rpb24gSW5zdGFuY2UKICAgICAgaWYgKCF0aGlzLnF1ZXN0aW9uX2JvZHkpIHsKICAgICAgICB0aGlzLmVycm9yID0gIllvdSBjYW4ndCBzZW5kIGFuIGVtcHR5IHF1ZXN0aW9uISI7CiAgICAgIH0gZWxzZSBpZiAodGhpcy5xdWVzdGlvbl9ib2R5Lmxlbmd0aCA+IDI0MCkgewogICAgICAgIHRoaXMuZXJyb3IgPSAiRW5zdXJlIHRoaXMgZmllbGQgaGFzIG5vIG1vcmUgdGhhbiAyNDAgY2hhcmFjdGVycyEiOwogICAgICB9IGVsc2UgewogICAgICAgIHZhciBlbmRwb2ludCA9ICIvYXBpL3F1ZXN0aW9ucy8iOwogICAgICAgIHZhciBtZXRob2QgPSAiUE9TVCI7CgogICAgICAgIGlmICh0aGlzLnNsdWcgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgZW5kcG9pbnQgKz0gIiIuY29uY2F0KHRoaXMuc2x1ZywgIi8iKTsKICAgICAgICAgIG1ldGhvZCA9ICJQVVQiOwogICAgICAgIH0KCiAgICAgICAgYXBpU2VydmljZShlbmRwb2ludCwgbWV0aG9kLCB7CiAgICAgICAgICBjb250ZW50OiB0aGlzLnF1ZXN0aW9uX2JvZHkKICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChxdWVzdGlvbl9kYXRhKSB7CiAgICAgICAgICBfdGhpcy4kcm91dGVyLnB1c2goewogICAgICAgICAgICBuYW1lOiAncXVlc3Rpb24nLAogICAgICAgICAgICBwYXJhbXM6IHsKICAgICAgICAgICAgICBzbHVnOiBxdWVzdGlvbl9kYXRhLnNsdWcKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KICB9LAogIGJlZm9yZVJvdXRlRW50ZXI6IGZ1bmN0aW9uIGJlZm9yZVJvdXRlRW50ZXIodG8sIGZyb20sIG5leHQpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgIHZhciBlbmRwb2ludCwgZGF0YTsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGlmICghKHRvLnBhcmFtcy5zbHVnICE9PSB1bmRlZmluZWQpKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gODsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgZW5kcG9pbnQgPSAiL2FwaS9xdWVzdGlvbnMvIi5jb25jYXQodG8ucGFyYW1zLnNsdWcsICIvIik7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDQ7CiAgICAgICAgICAgICAgcmV0dXJuIGFwaVNlcnZpY2UoZW5kcG9pbnQpOwoKICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgIGRhdGEgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIG5leHQoZnVuY3Rpb24gKHZtKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdm0ucXVlc3Rpb25fYm9keSA9IGRhdGEuY29udGVudDsKICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgbmV4dCgpKTsKCiAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZSk7CiAgICB9KSkoKTsKICB9LAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICBkb2N1bWVudC50aXRsZSA9ICJFZGl0b3IgLSBRdWVzdGlvblRpbWUiOwogIH0KfTs="},{"version":3,"sources":["QuestionEditor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,SAAA,UAAA,QAAA,yBAAA;AACA,OAAA,UAAA,MAAA,6BAAA;AACA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,IAAA,UAAA,EAAA;AADA,GADA;AAIA,EAAA,IAAA,EAAA,gBAJA;AAKA,EAAA,KAAA,EAAA;AACA,IAAA,IAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA;AADA,GALA;AAWA,EAAA,IAXA,kBAWA;AACA,WAAA;AACA,MAAA,aAAA,EAAA,IADA;AAEA,MAAA,KAAA,EAAA;AAFA,KAAA;AAIA,GAhBA;AAiBA,EAAA,OAAA,EAAA;AACA,IAAA,QADA,sBACA;AAAA;;AACA;AACA,UAAA,CAAA,KAAA,aAAA,EAAA;AACA,aAAA,KAAA,GAAA,mCAAA;AACA,OAFA,MAEA,IAAA,KAAA,aAAA,CAAA,MAAA,GAAA,GAAA,EAAA;AACA,aAAA,KAAA,GAAA,oDAAA;AACA,OAFA,MAEA;AACA,YAAA,QAAA,GAAA,iBAAA;AACA,YAAA,MAAA,GAAA,MAAA;;AACA,YAAA,KAAA,IAAA,KAAA,SAAA,EAAA;AACA,UAAA,QAAA,cAAA,KAAA,IAAA,MAAA;AACA,UAAA,MAAA,GAAA,KAAA;AACA;;AACA,QAAA,UAAA,CAAA,QAAA,EAAA,MAAA,EAAA;AAAA,UAAA,OAAA,EAAA,KAAA;AAAA,SAAA,CAAA,CACA,IADA,CACA,UAAA,aAAA,EAAA;AACA,UAAA,KAAA,CAAA,OAAA,CAAA,IAAA,CAAA;AACA,YAAA,IAAA,EAAA,UADA;AAEA,YAAA,MAAA,EAAA;AAAA,cAAA,IAAA,EAAA,aAAA,CAAA;AAAA;AAFA,WAAA;AAIA,SANA;AAOA;AACA;AAtBA,GAjBA;AAyCA,EAAA,gBAzCA,4BAyCA,EAzCA,EAyCA,IAzCA,EAyCA,IAzCA,EAyCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEA,EAAA,CAAA,MAAA,CAAA,IAAA,KAAA,SAFA;AAAA;AAAA;AAAA;;AAGA,cAAA,QAHA,4BAGA,EAAA,CAAA,MAAA,CAAA,IAHA;AAAA;AAAA,qBAIA,UAAA,CAAA,QAAA,CAJA;;AAAA;AAIA,cAAA,IAJA;AAAA,+CAKA,IAAA,CAAA,UAAA,EAAA;AAAA,uBAAA,EAAA,CAAA,aAAA,GAAA,IAAA,CAAA,OAAA;AAAA,eAAA,CALA;;AAAA;AAAA,+CAOA,IAAA,EAPA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA,GAlDA;AAmDA,EAAA,OAnDA,qBAmDA;AACA,IAAA,QAAA,CAAA,KAAA,GAAA,uBAAA;AACA;AArDA,CAAA","sourcesContent":["<template>\n  <div class=\"page\">\n    <div bmt-12>\n    </div>\n\n    <BaseLayout>\n      <template v-slot:right>\n            <b-card bg-variant=\"light\">\n  <div class=\"container mt-2\">\n    <h1 class=\"mb-3\">Ask a Question</h1>\n    <form @submit.prevent=\"onSubmit\">\n      <textarea\n        v-model=\"question_body\"\n        class=\"form-control\"\n        placeholder=\"What do you want to ask?\"\n        rows=\"3\"\n      ></textarea>\n      <br>\n      <button\n        type=\"submit\"\n        class=\"btn btn-success\"\n        >Publish\n      </button>\n    </form>\n    <p v-if=\"error\" class=\"muted mt-2\">{{ error }}</p>\n  </div>\n          </b-card>\n      </template>\n    </BaseLayout>\n  </div>\n</template>\n\n<script>\nimport { apiService } from \"@/common/api.service.js\";\nimport BaseLayout from \"@/components/BaseLayout.vue\";\nexport default {\n      components: {\n    BaseLayout\n  },\n  name: \"QuestionEditor\",\n  props: {\n    slug: {\n      type: String,\n      required: false\n    }\n  },\n  data() {\n    return {\n      question_body: null,\n      error: null\n    }\n  },\n  methods: {\n    onSubmit() {\n      // Tell the REST API to create or update a Question Instance\n      if (!this.question_body) {\n        this.error = \"You can't send an empty question!\";\n      } else if (this.question_body.length > 240) {\n        this.error = \"Ensure this field has no more than 240 characters!\";\n      } else {\n        let endpoint = \"/api/questions/\";\n        let method = \"POST\"; \n        if (this.slug !== undefined) {\n          endpoint += `${ this.slug }/`;\n          method = \"PUT\";\n        }     \n        apiService(endpoint, method, { content: this.question_body })\n          .then(question_data => {\n            this.$router.push({ \n              name: 'question', \n              params: { slug: question_data.slug }\n            })          \n          })  \n      }\n    }\n  },\n  async beforeRouteEnter(to, from, next) {\n    // if the component will be used to update a question, then get the question's data from the REST API\n    if (to.params.slug !== undefined) {\n      let endpoint = `/api/questions/${ to.params.slug }/`;\n      let data = await apiService(endpoint);\n      return next(vm => (vm.question_body = data.content))\n    } else {\n      return next();\n    }   \n  },\n  created() {\n    document.title = \"Editor - QuestionTime\";\n  }  \n}\n</script>\n"],"sourceRoot":"src/views"}]}